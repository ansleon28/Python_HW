# 1. Реализовать функцию, принимающую два числа (позиционные аргументы) и выполняющую их деление.
# Числа запрашивать у пользователя, предусмотреть обработку ситуации деления на ноль.

# def divide2(a,b):
#     """ Делит первый аргумент на второй, обрабатывает деление на ноль"""
#     try:
#         return a/b
#     except ZeroDivisionError:
#         return 'деление на ноль'
# print(divide2(1,0))


# 2. Реализовать функцию, принимающую несколько параметров, описывающих данные пользователя:
# имя, фамилия, год рождения, город проживания, email, телефон. Функция должна принимать параметры
# как именованные аргументы. Реализовать вывод данных о пользователе одной строкой.

# def userData(name='guest', surname='smith', yearB=1984, city='NORILSK', email='anon@anon.net', phone=84991234567):
#     userItems = ['имя', 'фамилия', 'год рождения', 'город проживания', 'email', 'телефон']
#     userDta = [name, surname, yearB, city, email, phone]
#
#     for i in range(len(userDta)):
#         print(f'{userItems[i]} : {userDta[i]}')
#     print('====конец записи===')
#     print()
#
# # sep = ”/ n”
# userData()
# userData(name='Peter')
# userData('alex', surname='popov', yearB=1945, city='MSK', email='anon@anon.net', phone=83456734344)

# 3. Реализовать функцию my_func(), которая принимает три позиционных аргумента, и возвращает сумму
# наибольших двух аргументов.

# def my_func(*digits):
#     if len(digits)==3:
#         return sum(digits)-min(digits)
#
# print(my_func(1,2,3))
# print(my_func(1,2,3,4))
# print(my_func(1,2))

# 4. Программа принимает действительное положительное число x и целое отрицательное число y.
# Необходимо выполнить возведение числа x в степень y. Задание необходимо реализовать в виде
# функции my_func(x, y). При решении задания необходимо обойтись без встроенной функции возведения числа в степень.
# ** Подсказка:** попробуйте решить задачу двумя способами. Первый — возведение в степень
# с помощью оператора **. Второй — более сложная реализация без оператора **, предусматривающая использование цикла.

# def expo(x, y):
#     for i in range(1, abs(y)):
#         x *= x
#     return 1 / x
#
#
# print(expo(2, -3))

# 5. Программа запрашивает у пользователя строку чисел, разделенных пробелом. При нажатии Enter должна
# выводиться сумма чисел. Пользователь может продолжить ввод чисел, разделенных пробелом и снова нажать
# Enter. Сумма вновь введенных чисел будет добавляться к уже подсчитанной сумме. Но если вместо числа
# вводится специальный символ, выполнение программы завершается. Если специальный символ введен после
# нескольких чисел, то вначале нужно добавить сумму этих чисел к полученной ранее сумме и после этого завершить программу.

# specSym = False
# ValueSum = 0
# while not specSym:
#     str = list(input('Числа через пробел, выход Q: ').split())
#     # print(str)
#     try:
#         for i in range(len(str)):
#             if (str[i] == 'Q') or (str[i] == 'q'):
#                 specSym = True
#             ValueSum += int(str[i])
#     except ValueError:
#         a = 1
#     print('сумма : ', ValueSum)

# 6. Реализовать функцию int_func(), принимающую слово из маленьких латинских букв и возвращающую его же,
# но с прописной первой буквой. Например, print(int_func(‘text’)) -> Text.
# Продолжить работу над заданием. В программу должна попадать строка из слов, разделенных пробелом.
# Каждое слово состоит из латинских букв в нижнем регистре. Сделать вывод исходной строки, но каждое слово
# должно начинаться с заглавной буквы. Необходимо использовать написанную ранее функцию int_func().

def int_func(text):
    return text.title()
str = 'dadads asdads asdas asdasd asdasd asdads asdad' #  строка из слов, разделенных пробелом
str = str.split()

print(' '.join([int_func(str) for str in str]))