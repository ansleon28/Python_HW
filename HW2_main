# 1. Создать список и заполнить его элементами различных типов данных. Реализовать скрипт проверки
# типа данных каждого элемента. Использовать функцию type() для проверки типа. Элементы списка можно
# не запрашивать у пользователя, а указать явно, в программе.

listOfElements = [1, 'wefwef', 'sdvsdv', 3, 4, 5, 6, 'fdf', 23]
print('Реализовать скрипт проверки типа данных каждого элемента.')
print()
print('Строка :', listOfElements)
i = 0
while i <= 8:
    print('Тип: ', type(listOfElements[i]))
    i += 1
print(1)


# 2. Для списка реализовать обмен значений соседних элементов, т.е. Значениями обмениваются элементы
# с индексами 0 и 1, 2 и 3 и т.д. При нечетном количестве элементов последний сохранить на своем месте.
# Для заполнения списка элементов необходимо использовать функцию input().
listOfElements = []
print('Задание 2 : обмен значений соседних элементов')
i = 0
while i <= 6:
    new_element = input(f'Введите {i}-й элемент: ')
    listOfElements.append(new_element)
    i += 1

len_cicle = len(listOfElements) // 2 * 2 - 1
# print(len_cicle)
i = 0
print('начальный список:  ', listOfElements)
while i <= len_cicle:
    listOfElements[i], listOfElements[i + 1] = listOfElements[i + 1], listOfElements[i]
    i += 2
print('измененный список: ', listOfElements)

# ========= переход к следующему заданию =================
i = input('Следующее задание (нажмите Enter)')
print()
print()

# 3. Пользователь вводит месяц в виде целого числа от 1 до 12. Сообщить к какому времени
# года относится месяц (зима, весна, лето, осень). Напишите решения через list и через dict.

list_seasons = ['зима', 'весна', 'лето', 'осень', 'зима']
mounth = int(input(' Введите месяц в виде целого числа: '))
seasonIndex = (mounth) // 3
print(list_seasons[seasonIndex])

dict_seasons = {
    1: 'зима', 2: 'зима', 12: 'зима', 3: 'весна', 4: 'весна', 5: 'весна',
    6: 'лето', 7: 'лето', 8: 'лето', 9: 'осень', 10: 'осень', 11: 'осень'
}
# mounth = int(input(' ?: '))
# print(dict_seasons.get(mounth))

# ========= переход к следующему заданию =================
i = input('Следующее задание (нажмите Enter)')
print()
print()

# 4. Пользователь вводит строку из нескольких слов, разделённых пробелами. Вывести каждое слово с новой строки.
# Строки необходимо пронумеровать. Если в слово длинное, выводить только первые 10 букв в слове.

UserString = 'erferf erererg ergergergertgrethgrethrth rthrth rthrth uyiutykyk yukykyk'
listOfString = UserString.split(' ')
print('Вывести каждое слово с новой строки.')
i = 0
for Element in listOfString:
    print(f'{i} :', Element[:10])
    i += 1

# ========= переход к следующему заданию =================
i = input('Следующее задание (нажмите Enter)')
print()
print('Реализовать структуру «Рейтинг»')

# 5. Реализовать структуру «Рейтинг», представляющую собой не возрастающий набор натуральных чисел.
# У пользователя необходимо запрашивать новый элемент рейтинга. Если в рейтинге существуют элементы с
# одинаковыми значениями, то новый элемент с тем же значением должен разместиться после них.
# Подсказка. Например, набор натуральных чисел: 7, 5, 3, 3, 2.
# Пользователь ввел число 3. Результат: 7, 5, 3, 3, 3, 2.
# Пользователь ввел число 8. Результат: 8, 7, 5, 3, 3, 2.
# Пользователь ввел число 1. Результат: 7, 5, 3, 3, 2, 1.
# Набор натуральных чисел можно задать непосредственно в коде, например, my_list = [7, 5, 3, 3, 2].

my_list = [7, 5, 3, 3, 2]
FlagInsert = False
print('Начальный список:        ', my_list)
newElement = int(input('Новый элемент : '))
for element in my_list:
    if newElement > element:
        my_list.insert(my_list.index(element), newElement)
        FlagInsert = True
        break
if not FlagInsert:  # Если не было вставки, вставляем в конец списка
    my_list.append(newElement)

print('Модифицированный список: ', my_list)

# 6. *Реализовать структуру данных «Товары».

# 6-е задание сделано в отдельном файле
